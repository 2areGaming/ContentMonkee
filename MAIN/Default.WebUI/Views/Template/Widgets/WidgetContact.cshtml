@using BAG.Common.Data.Entities
@using System.Text.RegularExpressions
@model WidgetWrapperViewModel
@{
    var widget = Model.Widget as WidgetContact;
}
@if (Model.IsDesignMode)
{
    <text>
        <div class="cm-admin-widget">
            <h5>Content</h5>
            <hr />
            <div class="form-group">
                <label for="title" class="control-label col-sm-2">Title:</label>
                <div class="col-sm-9">
                    <input type="text" class="form-control" id="title" name="title" value="@widget.Title" />
                </div>
            </div>

            <div class="form-group">
                <label for="description" class="control-label col-sm-2">Description:</label>
                <div class="col-sm-9">
                    <textarea class="form-control summernote" id="description" name="description">@widget.Description</textarea>
                </div>
            </div>

            <h5>VCard as Content</h5>
            <hr />
            <div class="form-group">
                <div class="col-sm-6 col-sm-offset-2">
                    <label class="well">
                        <input type="checkbox" id="usevcard" name="usevcard" @Html.Raw(widget.UseVCard ? "checked" : "") />
                        Use V-Card
                    </label>
                </div>
            </div>
            <div class="form-group">
                <input type="hidden" id="userid" name="userid" value="@widget.UserId" readonly />
                <label for="employeename" class="control-label col-sm-2">Mitarbeiter:</label>
                <div class="col-sm-6">
                    <fieldset>
                        <select id="employeename" name="employeename" class="form-control" onchange="document.getElementById('userid').value = this.options[this.selectedIndex].getAttribute('eid')">
                            @{
                                if (widget.UserId != null)
                                {
                                    <option selected="selected" eid="@widget.UserId">@widget.EmployeeName</option>
                                }
                                else
                                {
                                    <option selected="selected" eid="@Guid.Empty">please choose</option>
                                }
                                foreach (var emp in widget.employees.Get())
                                {
                                    <option eid="@emp.Id">@emp.DisplayName</option>
                                }
                            }
                        </select>
                    </fieldset>
                </div>
            </div>

            <h5>Configure Contact Form</h5>
            <hr />

            <div class="form-group">
                <label for="smtphost" class="control-label col-sm-2">SMTP Host:</label>
                <div class="col-sm-9">
                    <input type="text" class="form-control" id="smtphost" name="smtphost" value="@widget.SmtpHost" placeholder="smtp.office365.com" />
                </div>
            </div>

            <div class="form-group">
                <label for="smtpport" class="control-label col-sm-2">SMTP Port:</label>
                <div class="col-sm-9">
                    <input type="number" class="form-control" id="smtpport" name="smtpport" value="@widget.SmtpPort" />
                </div>
            </div>

            <div class="form-group">
                <label for="smtpusername" class="control-label col-sm-2">SMTP User:</label>
                <div class="col-sm-9">
                    <input type="text" class="form-control" id="smtpusername" name="smtpusername" value="@widget.SmtpUserName" placeholder="examplemail@example.com" />
                </div>
            </div>

            <div class="form-group">
                <label for="smtppassword" class="control-label col-sm-2">SMTP Password:</label>
                <div class="col-sm-9">
                    @if (HttpContext.Current.Request.IsSecureConnection)
                    {
                        <input type="password" class="form-control" id="smtppassword" name="smtppassword" value="@widget.SmtpPassword" />
                    }
                    else
                    {
                        <div class="alert alert-danger">No secure connection</div>
                    }
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-9 col-sm-offset-2">
                    <label class="well">
                        <input type="checkbox" id="smtpenablessl" name="smtpenablessl" @Html.Raw(widget.SmtpEnableSsl ? "checked" : "") />
                        Enable SSL
                    </label>
                </div>
            </div>

            <div class="form-group">
                <label for="smtpemail" class="control-label col-sm-2">SMTP E-Mail:</label>
                <div class="col-sm-9">
                    <input type="email" class="form-control" id="smtpemail" name="smtpemail" value="@widget.SmtpEmail" placeholder="examplemail@example.com" />
                </div>
            </div>

            <h5>Configure Answer E-Mail</h5>
            <hr />
            <div class="form-group">
                <label for="answersubject" class="control-label col-sm-2">AnswerSubject:</label>
                <div class="col-sm-9">
                    <input type="text" class="form-control" id="answersubject" name="answersubject" value="@widget.AnswerSubject" />
                </div>
            </div>

            <div class="form-group">
                <label for="answerbody" class="control-label col-sm-2"><a href="#" title="In the answer body {name} is replace by the name and {message} by the send message!" data-toggle="tooltip"><i class="fa fa-question-circle"></i></a>AnswerBody:</label>
                <div class="col-sm-9">
                    <textarea class="form-control summernote" id="answerbody" name="answerbody">@widget.AnswerBody</textarea>
                </div>
            </div>
        </div>

    </text>
}
else
{
    if (widget.UseVCard)
    {
        var employees = widget.employees.Get(e => e.Id == widget.UserId);
        var employee = employees.Count() > 0 ? employees.First() : null;
        var n = 0;
        string mailto = "mailto:" + employee.Email;
        string mailtocrypt = "";
        for (var i = 0; i < mailto.Length; i++)
        {
            n = (int)mailto[i];
            if (n >= 8364)
            {
                n = 128;
            }
            mailtocrypt += Convert.ToChar(n + 1).ToString();
        }
        if (employee != null)
        {
            <div class="cm-widget widget-contact">
                <div class="container">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="contactform">
                                <h3>@Html.Raw(widget.Title)</h3>
                                @using (Html.BeginForm("SendMessage", "SendContact", FormMethod.Post, new { id = "SendMessage" }))
                                {
                                    <input type="hidden" id="id" name="id" value="@widget.Id" />
                                    <div class="form-group">
                                        <input type="text" class="form-control" id="fullname" name="fullname" placeholder="Name" value="@widget.FullName">
                                    </div>
                                    <div class="form-group">
                                        <input type="text" class="form-control" id="telefon" name="telefon" placeholder="Telefon" value="@widget.Phone">
                                    </div>
                                    <div class="form-group">
                                        <input type="text" class="form-control" id="email" name="email" placeholder="E-Mail" value="@widget.Email">
                                    </div>
                                    <div class="form-group">
                                        <textarea class="form-control" id="message" name="message" placeholder="Nachricht">@widget.Message</textarea>
                                    </div>
                                    <button type="submit">Senden</button>
                                }
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="box vcard" itemscope itemtype="http://schema.org/Person">
                                <img src="@Regex.Replace(employee.ProfilImagePath, @"[0-9a-zA-Z]{8}(-)[0-9a-zA-Z]{4}(-)[0-9a-zA-Z]{4}(-)[0-9a-zA-Z]{4}(-)[0-9a-zA-Z]{12}|(tcSitesettingID)", _Globals.Instance.CurrentSiteSettingId.ToString())" class="vcard-image" itemprop="image" alt="@widget.EmployeeName" />
                                <strong itemprop="name">@widget.EmployeeName</strong>
                                <span itemprop="jobTitle">@employee.Position</span>
                                <div class="phone">
                                    Tel.: <span itemprop="telephone">@employee.Telephone</span> <br />
                                    Fax: @employee.Fax
                                </div>
                                <div class="qta">
                                    <a href="@Url.Action("GetVCardDownload", "QRCode", new { employeeId = @widget.UserId })"><i class="icon-download-harddisk"></i></a>
                                    <a href="@Url.Action("GetQRImage", "QRCode", new { employeeId = @widget.UserId, pixelsPerModule = 5 })" data-lightbox="image-1"><i class="icon-qr-code"></i></a>
                                    <a href="javascript:linkTo_UnCrypt('@mailtocrypt');" itemprop="email"><i class="icon-person-email"></i></a>
                                    <a href="@employee.XingProfileUrl" target="_blank" rel="nofollow" itemprop="sameAs"><i class="icon-share-xing"></i></a>
                                    <a href="@employee.LinkedInProfileUrl" target="_blank" rel="nofollow" itemprop="sameAs"><i class="icon-share-linkedin"></i></a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="cm-widget widget-contact">
            <div class="container">
                <div class="row">
                    <div class="col-md-6">
                        <div class="contactform">
                            @using (Html.BeginForm("SendMessage", "SendContact", FormMethod.Post, new { id = "SendMessage" }))
                            {
                                <input type="hidden" id="id" name="id" value="@widget.Id" />
                                <div class="form-group">
                                    <input type="text" class="form-control" id="fullname" name="fullname" placeholder="Name" value="@widget.FullName">
                                </div>
                                <div class="form-group">
                                    <input type="text" class="form-control" id="telefon" name="telefon" placeholder="Telefon" value="@widget.Phone">
                                </div>
                                <div class="form-group">
                                    <input type="text" class="form-control" id="email" name="email" placeholder="E-Mail" value="@widget.Email">
                                </div>
                                <div class="form-group">
                                    <textarea class="form-control" id="message" name="message" placeholder="Nachricht">@widget.Message</textarea>
                                </div>
                                <button type="submit">Senden</button>
                            }
                        </div>
                    </div>
                    <div class="col-md-6">
                        @Html.Raw(string.IsNullOrWhiteSpace(widget.Description) ? string.Empty : Regex.Replace(widget.Description, @"[0-9a-zA-Z]{8}(-)[0-9a-zA-Z]{4}(-)[0-9a-zA-Z]{4}(-)[0-9a-zA-Z]{4}(-)[0-9a-zA-Z]{12}|(tcSitesettingID)", _Globals.Instance.CurrentSiteSettingId.ToString()))
                    </div>
                </div>
            </div>
        </div>
    }
}